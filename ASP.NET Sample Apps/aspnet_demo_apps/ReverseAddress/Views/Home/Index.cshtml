@using ProApiLibrary.Data.Entities
@using SampleLibrary
@model ProApiLibrary.Api.Responses.Response<ProApiLibrary.Data.Entities.ILocation>
@{
    ViewBag.Title = "WhitePages PRO Sample App";
}

<style type="text/css">
    .label-floatlabel {
        position: absolute;
        top: 0px;
        left: 8px;
        display: block;
        opacity: 1;
        font-size: 11px;
        font-weight: bold;
        color: rgb(131, 135, 128);
    }

    .float-label {
        padding-top: 12px;
    }
</style>

<h2>Reverse Address</h2>
@using (Html.BeginForm("Index", "Home", FormMethod.Post))
{
    <div class="row">
        <div class="col-md-12 tab-content">
            <div class="inner tab-pane active">
                <div class="form-group">
                    <div class="floatlabel-wrapper" style="position: relative">
                        <label for="person_address" class="label-floatlabel">Street Address</label>
                        <input placeholder="" name="Address" value="" class="both-connect form-control float-label"
                               type="text" id="person_address">
                    </div>
                </div>
                <div class="form-group form-group-last">
                    <div class="input-group">
                        <div class="floatlabel-wrapper" style="position: relative">
                            <label for="person_where" class="label-floatlabel">City, State, or ZIP</label>
                            <input placeholder="" name="Where" value="" class="both-connect form-control float-label"
                                   type="text" id="person_where" style="width: 200px;">
                        </div>
                        <div class="js-clear-inputs input-group-addon" title="Clear fields">
                            <span class="wp-icon-pro-x"></span>
                        </div>
                        <div style="display: table-cell; vertical-align: middle; padding-left: 3px;">
                            <button name="button" type="submit" class="btn btn-info find">
                                <span class="wp-icon-pro wp-icon-pro-search"></span>&nbsp;Search
                            </button>

                        </div>
                    </div>
                    
                </div>
                
            </div>
            
        </div>
    </div>
}

@if (Model != null)
{
    if (Model.ResponseMessages != null)
    {
        foreach (var rm in Model.ResponseMessages)
        {
            <h4>Exception: @rm.Type @rm.Code @rm.Text</h4>
        }

        <p />
    }

    if (Model.IsSuccess)
    {
        if (Model.Results == null)
        {
            <div>No results were returned.</div>
        }
        else
        {
            <h1>
                @{
            var resultCount = Model.Results.Count;
            <text>@resultCount</text>
            } result@(resultCount == 1 ? "" : "s") returned.
        </h1>
            foreach (var result in Model.Results)
            {
                <div class="lookup-results">
                    <div class="lookup-result row">
                        <div class="col-md-4">
                            <div class="result-box" data-section="location">
                                <div class="location" data-result-type="location">
                                    <p class="search location">
                                        @result.StandardAddressLine1<br />
                                    @if (!String.IsNullOrWhiteSpace(@result.StandardAddressLine2))
                                    {
                                        <text>@result.StandardAddressLine2</text>
                                        <br />
                                    }
                                    @result.City @result.StateCode @result.PostalCode
                                </p>
                                <div class="attr receiving-mail">
                                    <span class="attrname usage">Receiving Mail:</span>
                                    <span class="attrvalue  usage">
                                        @(result.IsReceivingMail.HasValue ? (result.IsReceivingMail.Value ? "Yes" : "No") : "Unknown")
                                    </span>
                                </div>
                                <div class="attr usage">
                                    <span class="attrname usage">Usage:</span>
                                    <span class="attrvalue  usage">
                                        @(result.Usage.HasValue ? result.Usage.Value.ToString() : "Unknown")
                                    </span>
                                </div>
                                <div class="attr delivery-point">
                                    <span class="attrname delivery-point">Delivery Point:</span>
                                    <span class="attrvalue attrsafe delivery-point">
                                        @(result.DeliveryPoint.HasValue ? result.DeliveryPoint.Value.ToString() : "Unknown")
                                    </span>
                                </div>

                            </div>
                        </div>
                    </div>
                    <div class="col-md-8">
                        <div class="result-box" data-section="person">
                            <header>People</header>
                            @{
                                    var people = result.PersonAssociations;
                                    foreach (var personAssocation in people)
                                    {
                                        var person = personAssocation.Person;
                                        var ageRange = person.AgeRange == null ? "Unknown" : person.AgeRange.Start + "&mdash;" + person.AgeRange.End;
                                        var gender = person.Gender.HasValue ? person.Gender.ToString() : "Unknown";

                                        var linkedToPhone = "Unknown";
                                        var linkedToAddress = "Unknown";

                                        DateTime phoneLinkedDate;
                                        var firstPhone = person.PhoneAssociations.FirstOrDefault();
                                        if (firstPhone != null)
                                        {
                                            phoneLinkedDate = firstPhone.ContactCreationDate.GetValueOrDefault();
                                            if (DateTime.Now.AddYears(-1) > phoneLinkedDate)
                                            {
                                                linkedToPhone = "At least 1 year ago";
                                            }
                                            else
                                            {
                                                linkedToPhone = "Less than 1 year ago";
                                            }
                                        }

                                        DateTime addressLinkedDate;
                                        var legalEntityAssociation = result.PersonAssociations.FirstOrDefault(x => x.EntityId.Guid == person.Id.Guid);
                                        if (legalEntityAssociation != null)
                                        {
                                            var validFor = legalEntityAssociation.ValidFor;
                                            if (validFor != null)
                                            {
                                                addressLinkedDate = validFor.Start.Value;
                                                if (DateTime.Now.AddYears(-1) > addressLinkedDate)
                                                {
                                                    linkedToAddress = "At least 1 year ago";
                                                }
                                                else
                                                {
                                                    linkedToAddress = "Less than 1 year ago";
                                                }
                                            }

                                        }

                                        <div class="person" data-result-type="person">
                                            <h3 class="search person-name">
                                                @person.BestName&nbsp;
                                            </h3>
                                            <div class="attr age-range">
                                                <span class="attrname age-range">Age Range:</span>
                                                <span class="attrvalue age-range">@Html.Raw(ageRange)</span>
                                            </div>
                                            <div class="attr gender">
                                                <span class="attrname gender">Gender:</span>
                                                <span class="attrvalue  gender">@gender</span>
                                            </div>
                                            <div class="attr linked-to-phone">
                                                <span class="attrname linked-to-phone">Linked to Phone:</span>
                                                <span class="attrvalue  linked-to-phone">@linkedToPhone</span>
                                            </div>
                                            <div class="attr linked-to-address">
                                                <span class="attrname linked-to-address">Linked to Address:</span>
                                                <span class="attrvalue  linked-to-address">@linkedToAddress</span>
                                            </div>
                                            @{
                                        if (person.PhoneAssociations.Count > 0)
                                        {
                                            var alternatePhoneAssociation = person.PhoneAssociations.FirstOrDefault();
                                            var alternatePhone = alternatePhoneAssociation.Phone;
                                            <div class="alternate-phone">
                                                <div class="attr alternate-phone">
                                                    <span class="attrname alternate-phone">Alternate Phone:</span>
                                                    <span class="attrvalue ">
                                                        @alternatePhone.PhoneNumber
                                                        <span class="alternate-type">@alternatePhone.LineType.ToString()</span>
                                                    </span>
                                                </div>
                                            </div>
                                        }
                                            }
                                            @{
                                        var personAssociations = person.PersonAssociations;
                                        if (personAssociations != null && personAssociations.Any())
                                        {
                                            <div class="related-people attr">
                                                <div class="attrname">
                                                    Associated People
                                                </div>
                                                @foreach (var other in personAssociations)
                                                {
                                                    <ul class="list-inline list-unstyled">
                                                        <li>
                                                            @other.Person.BestName&nbsp;
                                                        </li>
                                                    </ul>
                                                }
                                            </div>
                                        }
                                            }
                                            @{
                                        var locationAssociations = person.LocationAssociations;
                                        if (locationAssociations != null && locationAssociations.Any())
                                        {
                                            <div class="person-addresses-container">
                                                <div class="toggle">
                                                    <span class="title">Known Address</span>
                                                </div>
                                                @foreach (var locationAssociation in locationAssociations)
                                                {
                                                    var thisLocation = locationAssociation.Location;
                                                    if (thisLocation != null)
                                                    {
                                                        var historical = locationAssociation.IsHistorical;
                                                        var validFor = locationAssociation.ValidFor;
                                                        Date validStart = null;
                                                        Date validStop = null;
                                                        if (validFor != null)
                                                        {
                                                            validStart = validFor.Start;
                                                            validStop = validFor.Stop;
                                                        }

                                                        <div class="addresses">
                                                            <div class="address highlighted">

                                                                @if (historical)
                                                                {
                                                                    <div class="date-range">
                                                                        @DemoUtils.FormatDateAsMonth(validStart) -
                                                                    @DemoUtils.FormatDateAsMonth(validStop)
                                                                    (@DemoUtils.GetTimePeriodDisplay(validFor))
                                                                </div>
                                                                }
                                                                else
                                                                {
                                                                    <div class="date-range">
                                                                        Current (@DemoUtils.GetDisplayDuration(validStart))
                                                                    </div>
                                                                }

                                                                <p class="search">
                                                                    @thisLocation.StandardAddressLine1
                                                                    @if (!String.IsNullOrWhiteSpace(thisLocation.StandardAddressLine2))
                                                                    {
                                                                        <text>@thisLocation.StandardAddressLine2</text>
                                                                        <br />

                                                                    }
                                                                    <br />
                                                                    @thisLocation.City @thisLocation.StateCode @thisLocation.PostalCode
                                                                </p>
                                                            </div>
                                                        </div>
                                                    }
                                                }
                                            </div>
                                        }

                                            }

                                        </div>
                                        <hr />
                                    }
                            }

                        </div>
                    </div>
                </div>
            </div>
            }
        }
    }
}