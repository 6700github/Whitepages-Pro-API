@using SampleLibrary
@using ProApiLibrary.Data.Entities
@model ProApiLibrary.Api.Responses.Response<ProApiLibrary.Data.Entities.IPerson>
@{
    ViewBag.Title = "WhitePages PRO Sample App";
}
<style type="text/css">
    .label-floatlabel {
        position: absolute; top: 0px; left: 8px; display: block; opacity: 1; font-size: 11px; font-weight: bold; color: rgb(131, 135, 128);
    }
    .float-label {
        padding-top: 12px;
    }
</style>
<h1>Find Person</h1>
@using (Html.BeginForm("Index", "Home", FormMethod.Post))
{
    <div class="row">
        <div class="col-md-12 tab-content">
            <div class="inner tab-pane active" id="lookup-people">
                <div class="form-group">
                    <div class="floatlabel-wrapper" style="position:relative">
                        <label for="person_name" class="label-floatlabel">Name</label>
                        <input placeholder="Name" name="Name" value="" class="right-connect form-control float-label active-floatlabel" type="text" id="person_name">
                    </div>
                </div>
                <div class="form-group">
                    <div class="floatlabel-wrapper" style="position:relative">
                        <label for="person_address" class="label-floatlabel">Street Address (optional)</label>
                        <input placeholder="Street Address (optional)" name="Address" value="" class="both-connect form-control float-label" type="text" id="person_address">
                    </div>
                </div>
                <div class="form-group">
                    <div class="input-group">
						<div class="floatlabel-wrapper" style="position:relative">
							<label for="person_where" class="label-floatlabel">City, State, Province, or Zip</label>
							<input placeholder="" name="Where" value="" class="both-connect form-control float-label" type="text" id="person_where" style="width: 200px;">
						</div>
                        <div class="js-clear-inputs input-group-addon" title="Clear fields">
                            <span class="wp-icon-pro-x"></span>
                        </div>
                        <div style="display: table-cell; vertical-align: middle; padding-left: 3px;">
                            <button name="button" type="submit" class="btn btn-info find">
                                <span class="wp-icon-pro wp-icon-pro-search"></span>&nbsp;Search
                            </button>
                        </div>
					</div>
				</div>
                
            </div>
            
        </div>
    </div>
}

@if (Model != null) 
{
    if (Model.ResponseMessages != null)
	{
		foreach (var rm in Model.ResponseMessages)
		{
			<h4>Exception: @rm.Type @rm.Code @rm.Text</h4>
		}

		<p />
	}

	if (Model.IsSuccess)
	{
		if (Model.Results == null)
		{
			<div>No results were returned.</div>
		}
		else
		{
		    <h1>@{
		            var resultCount = Model.Results.Count;
				    <text>@resultCount</text>
			    } result@(resultCount == 1 ? "" : "s") returned.
			</h1>
			<div>
				@foreach (var result in Model.Results)
				{
					var ageRange = result.AgeRange == null ? "Unknown" : result.AgeRange.Start + "&mdash;" + result.AgeRange.End;
					var name = result.BestName;
					var gender = result.Gender.HasValue ? result.Gender.ToString() : "Unknown";
					var linkedToPhone = "Unknown";
					var linkedToAddress = "Unknown";
					
					DateTime phoneLinkedDate = DateTime.Now;
					var firstPhone = result.PhoneAssociations.FirstOrDefault();
					if (firstPhone != null)
					{
						phoneLinkedDate = firstPhone.ContactCreationDate.GetValueOrDefault();
						if (DateTime.Now.AddYears(-1) > phoneLinkedDate)
						{
							linkedToPhone = "At least 1 year ago";
						}
						else
						{
							linkedToPhone = "Less than 1 year ago";
						}
					}

					DateTime addressLinkedDate = DateTime.Now;
					var firstAddress = result.BestLocationAssociation;
					if (firstAddress != null)
					{
						addressLinkedDate = firstAddress.ContactCreationDate.GetValueOrDefault();
						if (DateTime.Now.AddYears(-1) > addressLinkedDate)
						{
							linkedToAddress = "At least 1 year ago";
						}
						else
						{
							linkedToAddress = "Less than 1 year ago";
						}
					}

					var bestLocation = result.BestLocation;
					var bestPhoneAssociation = result.PhoneAssociations.FirstOrDefault();
					IPhone bestPhone = null;
					var phoneNumber = "Unknown";
					if (bestPhoneAssociation != null)
					{
						bestPhone = bestPhoneAssociation.Phone;
						if (bestPhone != null)
						{
							phoneNumber = bestPhone.PhoneNumber;
						}
					}
					var locationAssociationCount = result.LocationAssociations == null ? 0 : result.LocationAssociations.Count();

					<div class="col-md-4">
						<div class="result-box">
							<header>Person</header>
							<div class="person last" data-result-type="person">
								<h3 class="search person-name">
									@name &nbsp;
								</h3>
								<div class="attr age-range">
									<span class="attrname age-range">Age Range:</span>
									<span class="attrvalue  age-range">@Html.Raw(ageRange)</span>
								</div>
								<div class="attr gender">
									<span class="attrname gender">Gender:</span>
									<span class="attrvalue  gender">@gender</span>
								</div>
								<div class="attr linked-to-phone">
									<span class="attrname linked-to-phone">Linked to Phone:</span>
									<span class="attrvalue  linked-to-phone" title="@phoneLinkedDate">@linkedToPhone</span>
								</div>
							    <div class="attr linked-to-address">
							        <span class="attrname linked-to-address">Linked to Address:</span>
							        <span class="attrvalue  linked-to-address" title="@addressLinkedDate">@linkedToAddress</span>
							    </div>
                                @if ((result.PersonAssociations != null)
                                        && (result.PersonAssociations.Any())) {
                                    <div class="related-people attr" style="margin-top: 10px;">
                                        <div class="attrname">
                                            <span class="translation_missing">Associated People</span>
                                        </div>
                                        @foreach (var associatedPerson in result.PersonAssociations)
                                        {
                                            <ul class="list-inline list-unstyled">
                                                <li>
                                                    @associatedPerson.Person.BestName &nbsp;
                                                </li>
                                            </ul>
                                        }
                                    </div>
									}
								</div>
								<div class="person-addresses-container" style="margin-top: 10px;">
									<div class="toggle">
										<span class="title">All Addresses (@locationAssociationCount)</span>
									</div>
									@if (locationAssociationCount > 0)
									{
										<div class="addresses">
											@foreach (var locationAssociation in result.LocationAssociations.OrderByDescending(x=>(x.ValidFor == null || x.ValidFor.Start == null) ? DateTime.MinValue : x.ValidFor.Start.Value))
											{
												var historical = locationAssociation.IsHistorical;
												var validFor = locationAssociation.ValidFor;
												Date validStart = null;
												Date validStop = null;
												if (validFor != null)
												{
													validStart = validFor.Start;
													validStop = validFor.Stop;
												}
												var location = locationAssociation.Location;
												<div class="address @if (!historical)
												                    {
													                    <text>highlighted</text>
												                    }">
													<p class="search">
														@if (!locationAssociation.IsHistorical)
														{
															<div class="date-range">
																Current (@DemoUtils.GetDisplayDuration(validStart))
															</div>	
														}
														else
														{
															<div class="date-range">@DemoUtils.FormatDateAsMonth(validStart) - @DemoUtils.FormatDateAsMonth(validStop) @DemoUtils.GetTimePeriodDisplay(validFor)</div>
														}
														<div>
															@location.StandardAddressLine1
															<br />
															@if (!String.IsNullOrWhiteSpace(location.StandardAddressLine2))
															{
																<text>@location.StandardAddressLine2</text>
																<br/>
															}
															@location.City @location.StateCode @location.PostalCode&nbsp;
														</div>
														

													</p>
													
												</div>
												
											}
										</div>
									}
								</div>
							</div>
						</div>
					
					    <div class="col-md-8">
						<div class="result-box big">
							<div class="row">
								@if (bestLocation != null)
								{
									<div class="col-md-6 left">
										<header>Address</header>
										<div class="location" data-result-type="location">
											<p class="search location">
													@bestLocation.StandardAddressLine1
													<br />
													@if (!string.IsNullOrWhiteSpace(bestLocation.StandardAddressLine2))
													{
														@bestLocation.StandardAddressLine2
														<br/>
													}
													@bestLocation.City @bestLocation.StateCode, @bestLocation.PostalCode
												
											</p>
											<div class="attr receiving-mail">
												<span class="attrname receiving-mail">Receiving Mail:</span>
												<span class="attrvalue attrsafe receiving-mail">@(bestLocation.IsReceivingMail.HasValue ? (bestLocation.IsReceivingMail.Value ? "Yes" : "No") : "Unknown")</span>
											</div>
											<div class="attr usage">
												<span class="attrname usage">Usage:</span>
												<span class="attrvalue  usage">@(bestLocation.Usage.HasValue ? bestLocation.Usage.Value.ToString() : "Unknown")</span>
											</div>
											<div class="attr delivery-point">
												<span class="attrname delivery-point">Delivery Point:</span>
												<span class="attrvalue attrsafe delivery-point">@(bestLocation.DeliveryPoint.HasValue ? bestLocation.DeliveryPoint.Value.ToString() : "Unknown")</span>
											</div>

										</div>
									</div>
								}
								@if (bestPhone != null)
								{
									<div class="col-md-6 right">
										<header>Phone</header>
										<div data-result-type="phone">
											<div class="search phone-number">
													@phoneNumber&nbsp;
											</div>
											<div class="attr">
												<span class="attrname do-not-call-registry">Do Not Call Registry:</span>
												<span class="attrvalue do-not-call-registry">@(bestPhone.DoNotCall.HasValue ? (bestPhone.DoNotCall.Value ? "Registered" : "Not Registered") : "Unknown")</span>
											</div>
										</div>
										<br />
									</div>
								}
							</div>
						</div>
					</div>

				    <hr/>	
				}
				
			</div>
        }
    }
}